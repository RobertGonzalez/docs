<?xml version="1.0"?>
<project version="0.8.8" title="Aura Project for PHP: aura.di">
  <file path="src.php" hash="1300019215">
    <include type="Require Once" namespace="default" line="2">
      <name>/src/ConfigInterface.php</name>
    </include>
    <include type="Require Once" namespace="default" line="3">
      <name>/src/Config.php</name>
    </include>
    <include type="Require Once" namespace="default" line="4">
      <name>/src/Container.php</name>
    </include>
    <include type="Require Once" namespace="default" line="5">
      <name>/src/Exception.php</name>
    </include>
    <include type="Require Once" namespace="default" line="6">
      <name>/src/Exception/ServiceInvalid.php</name>
    </include>
    <include type="Require Once" namespace="default" line="7">
      <name>/src/Exception/ServiceNotFound.php</name>
    </include>
    <include type="Require Once" namespace="default" line="8">
      <name>/src/ForgeInterface.php</name>
    </include>
    <include type="Require Once" namespace="default" line="9">
      <name>/src/Forge.php</name>
    </include>
    <include type="Require Once" namespace="default" line="10">
      <name>/src/Lazy.php</name>
    </include>
  </file>
  <file path="src/ForgeInterface.php" hash="1300019215">
    <interface namespace="aura\di" line="3">
      <name>ForgeInterface</name>
      <extends/>
      <full_name>aura\di\ForgeInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="12">
        <name>getConfig</name>
        <docblock>
          <description>Gets the injected Config object.</description>
          <long-description/>
          <tag name="return" type="aura\di\ConfigInterface" line="5"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="28">
        <name>newInstance</name>
        <docblock>
          <description>Creates and returns a new instance of a class using reflection and&lt;br/&gt;the configuration parameters, optionally with overriding params.</description>
          <long-description/>
          <tag name="param" type="string" variable="$class" line="14">The class to instantiate.</tag>
          <tag name="param" type="array" variable="$params" line="14">An associative array of override parameters where the key the name of the constructor parameter and the value is the parameter value to use.</tag>
          <tag name="return" type="object" line="14"/>
        </docblock>
        <argument line="28">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="28">
          <name>$params</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="src/Container.php" hash="1300019215">
    <class final="false" abstract="false" line="18" namespace="aura\di">
      <name>Container</name>
      <extends/>
      <full_name>aura\di\Container</full_name>
      <docblock>
        <description>Dependency injection container.</description>
        <long-description/>
        <tag name="package" line="11">aura.di</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28">
        <name>$params</name>
        <default/>
        <docblock>
          <description>A convenient reference to the Config::$params object, which itself&lt;br/&gt;is contained by the Forge object.</description>
          <long-description/>
          <tag name="var" type="\ArrayObject" variable="" line="20">\ArrayObject</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38">
        <name>$setter</name>
        <default/>
        <docblock>
          <description>A convenient reference to the Config::$setter object, which itself&lt;br/&gt;is contained by the Forge object.</description>
          <long-description/>
          <tag name="var" type="\ArrayObject" variable="" line="30">\ArrayObject</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47">
        <name>$forge</name>
        <default/>
        <docblock>
          <description>A Forge object to create classes through reflection.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="40">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56">
        <name>$service</name>
        <default>array</default>
        <docblock>
          <description>Retains named services.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="49">array</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="66">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag name="param" type="aura\di\ForgeInterface" variable="$forge" line="58">A forge for creating objects using keyword parameter configuration.</tag>
        </docblock>
        <argument line="66">
          <name>$forge</name>
          <default/>
          <type>ForgeInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="86">
        <name>__get</name>
        <docblock>
          <description>Magic get to provide access to the Forge and the Config::$external &lt;br/&gt;objects.</description>
          <long-description/>
          <tag name="param" type="string" variable="$key" line="76">The property to retrieve ('forge' or 'config').</tag>
          <tag name="return" type="mixed" line="76"/>
        </docblock>
        <argument line="86">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="101">
        <name>getForge</name>
        <docblock>
          <description>Gets the Forge object used for creating new instances.</description>
          <long-description/>
          <tag name="return" type="array" line="94"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="115">
        <name>has</name>
        <docblock>
          <description>Does a particular service exist?</description>
          <long-description/>
          <tag name="param" type="string" variable="$key" line="106">The service key to look up.</tag>
          <tag name="return" type="bool" line="106"/>
        </docblock>
        <argument line="115">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="133">
        <name>set</name>
        <docblock>
          <description>Sets a service object by name.</description>
          <long-description>If you set a service as a closure, it is automatically treated as a &lt;br/&gt;Lazy.</long-description>
          <tag name="param" type="string" variable="$key" line="120">The service key.</tag>
          <tag name="param" type="object" variable="$val" line="120">The service object; if a Closure, is treated as a Lazy.</tag>
        </docblock>
        <argument line="133">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="133">
          <name>$val</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="158">
        <name>get</name>
        <docblock>
          <description>Gets a service object by key, lazy-loading it as needed.</description>
          <long-description/>
          <tag name="param" type="string" variable="$key" line="146">The service to get.</tag>
          <tag name="return" type="object" line="146"/>
          <tag name="throws" line="146">\aura\di\Exception_ServiceNotFound when the requested service
does not exist.</tag>
        </docblock>
        <argument line="158">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="181">
        <name>getServices</name>
        <docblock>
          <description>Gets the list of services provided.</description>
          <long-description/>
          <tag name="return" type="array" line="174"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="204">
        <name>lazyGet</name>
        <docblock>
          <description>Returns a Lazy that gets a service. This allows you to replace the&lt;br/&gt;following idiom ...</description>
          <long-description>$di-&gt;params['ClassName']['param_name'] = new Lazy(function() use ($di)) {&lt;br/&gt;         return $di-&gt;get('service');&lt;br/&gt;     }&lt;br/&gt;&lt;br/&gt;... with the following:&lt;br/&gt;&lt;br/&gt;     $di-&gt;params['ClassName']['param_name'] = $di-&gt;lazyGet('service');</long-description>
          <tag name="param" type="string" variable="$key" line="186">The service name; it does not need to exist yet.</tag>
          <tag name="return" type="aura\di\Lazy" line="186">A lazy-load object that gets the named service.</tag>
        </docblock>
        <argument line="204">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="224">
        <name>newInstance</name>
        <docblock>
          <description>Returns a new instance of the specified class, optionally &lt;br/&gt;with additional override parameters.</description>
          <long-description/>
          <tag name="param" type="string" variable="$class" line="212">The type of class of instantiate.</tag>
          <tag name="param" type="array" variable="$params" line="212">Override parameters for the instance.</tag>
          <tag name="return" type="object" line="212">An instance of the requested class.</tag>
        </docblock>
        <argument line="224">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="224">
          <name>$params</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="249">
        <name>lazyNew</name>
        <docblock>
          <description>Returns a Lazy that creates a new instance. This allows you to replace&lt;br/&gt;the following idiom:</description>
          <long-description>$di-&gt;params['ClassName']['param_name'] = Lazy(function() use ($di)) {&lt;br/&gt;         return $di-&gt;newInstance('OtherClass', array(...));&lt;br/&gt;     }&lt;br/&gt;&lt;br/&gt;... with the following:&lt;br/&gt;&lt;br/&gt;     $di-&gt;params['ClassName']['param_name'] = $di-&gt;lazyNew('OtherClass', array(...));</long-description>
          <tag name="param" type="string" variable="$class" line="229">The type of class of instantiate.</tag>
          <tag name="param" type="array" variable="$params" line="229">Override parameters for the instance.</tag>
          <tag name="return" type="aura\di\Lazy" line="229">A lazy-load object that creates the new instance.</tag>
        </docblock>
        <argument line="249">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="249">
          <name>$params</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Forge.php" hash="1300019215">
    <class final="false" abstract="false" line="18" namespace="aura\di">
      <name>Forge</name>
      <extends/>
      <full_name>aura\di\Forge</full_name>
      <docblock>
        <description>Creates objects using reflection and the specified configuration values.</description>
        <long-description/>
        <tag name="package" line="11">aura.di</tag>
      </docblock>
      <implements>ForgeInterface</implements>
      <property final="false" static="false" visibility="protected" line="28">
        <name>$config</name>
        <default/>
        <docblock>
          <description>A Config object to get parameters for object instantiation and&lt;br/&gt;\ReflectionClass instances.</description>
          <long-description/>
          <tag name="var" type="aura\di\Config" variable="" line="20">aura\di\Config</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="37">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag name="param" type="aura\di\ConfigInterface" variable="$config" line="30">A configuration object.</tag>
        </docblock>
        <argument line="37">
          <name>$config</name>
          <default/>
          <type>ConfigInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="49">
        <name>getConfig</name>
        <docblock>
          <description>Gets the injected Config object.</description>
          <long-description/>
          <tag name="return" type="aura\di\ConfigInterface" line="42"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="70">
        <name>newInstance</name>
        <docblock>
          <description>Creates and returns a new instance of a class using reflection and&lt;br/&gt;the configuration parameters, optionally with overriding params.</description>
          <long-description>Parameters that are Lazy are invoked before instantiation.</long-description>
          <tag name="param" type="string" variable="$class" line="54">The class to instantiate.</tag>
          <tag name="param" type="array" variable="$params" line="54">An associative array of override parameters where the key the name of the constructor parameter and the value is the parameter value to use.</tag>
          <tag name="return" type="object" line="54"/>
        </docblock>
        <argument line="70">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$params</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Exception.php" hash="1300019215">
    <class final="false" abstract="false" line="3" namespace="aura\di">
      <name>Exception</name>
      <extends>\Exception</extends>
      <full_name>aura\di\Exception</full_name>
    </class>
  </file>
  <file path="src/ConfigInterface.php" hash="1300019215">
    <interface namespace="aura\di" line="18">
      <name>ConfigInterface</name>
      <extends/>
      <full_name>aura\di\ConfigInterface</full_name>
      <docblock>
        <description>Retains and unifies class constructor parameter values with external values.</description>
        <long-description/>
        <tag name="package" line="11">aura.di</tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="29">
        <name>fetch</name>
        <docblock>
          <description>Fetches the unified constructor values and external values.</description>
          <long-description/>
          <tag name="param" type="string" variable="$class" line="20">The class name to fetch values for.</tag>
          <tag name="return" type="array" line="20">An associative array of constructor values for the class.</tag>
        </docblock>
        <argument line="29">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="38">
        <name>getParams</name>
        <docblock>
          <description>Gets the $params property.</description>
          <long-description/>
          <tag name="return" type="\ArrayObject" line="31"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="47">
        <name>getSetter</name>
        <docblock>
          <description>Gets the $setter property.</description>
          <long-description/>
          <tag name="return" type="\ArrayObject" line="40"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="59">
        <name>getReflect</name>
        <docblock>
          <description>Gets a retained ReflectionClass; if not already retained, creates and&lt;br/&gt;retains one before returning it.</description>
          <long-description/>
          <tag name="param" type="string" variable="$class" line="49">The class to reflect on.</tag>
          <tag name="return" type="\ReflectionClass" line="49"/>
        </docblock>
        <argument line="59">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="src/Config.php" hash="1300019215">
    <class final="false" abstract="false" line="18" namespace="aura\di">
      <name>Config</name>
      <extends/>
      <full_name>aura\di\Config</full_name>
      <docblock>
        <description>Retains and unifies class constructor parameter values with external values.</description>
        <long-description/>
        <tag name="package" line="11">aura.di</tag>
      </docblock>
      <implements>ConfigInterface</implements>
      <property final="false" static="false" visibility="protected" line="28">
        <name>$params</name>
        <default/>
        <docblock>
          <description>Constructor params from external configuration in the form &lt;br/&gt;`$params[$class][$name] = $value`.</description>
          <long-description/>
          <tag name="var" type="\ArrayObject" variable="" line="20">\ArrayObject</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38">
        <name>$reflect</name>
        <default>array</default>
        <docblock>
          <description>An array of retained ReflectionClass instances; this is as much for&lt;br/&gt;the Forge as it is for Config.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="30">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47">
        <name>$setter</name>
        <default/>
        <docblock>
          <description>Setter definitions in the form of `$setter[$class][$method] = $value`.</description>
          <long-description/>
          <tag name="var" type="\ArrayObject" variable="" line="40">\ArrayObject</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57">
        <name>$unified</name>
        <default>array</default>
        <docblock>
          <description>Constructor params and setter definitions, unified across class&lt;br/&gt;defaults, inheritance hierarchies, and external configurations.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="49">array</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="64">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="80">
        <name>getParams</name>
        <docblock>
          <description>Gets the $params property.</description>
          <long-description/>
          <tag name="return" type="\ArrayObject" line="73"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="92">
        <name>getSetter</name>
        <docblock>
          <description>Gets the $setter property.</description>
          <long-description/>
          <tag name="return" type="\ArrayObject" line="85"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="106">
        <name>getReflect</name>
        <docblock>
          <description>Returns a \ReflectionClass for a named class.</description>
          <long-description/>
          <tag name="param" type="string" variable="$class" line="97">The class to reflect on.</tag>
          <tag name="return" type="\ReflectionClass" line="97"/>
        </docblock>
        <argument line="106">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="124">
        <name>fetch</name>
        <docblock>
          <description>Fetches the unified constructor params and setter values for a class.</description>
          <long-description/>
          <tag name="param" type="string" variable="$class" line="114">The class name to fetch values for.</tag>
          <tag name="return" type="array" line="114">An array with two elements; 0 is the constructor values for the class, and 1 is the setter methods and values for the class.</tag>
        </docblock>
        <argument line="124">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Lazy.php" hash="1300019215">
    <class final="false" abstract="false" line="18" namespace="aura\di">
      <name>Lazy</name>
      <extends/>
      <full_name>aura\di\Lazy</full_name>
      <docblock>
        <description>Wraps a closure specifically for the purpose of lazy-loading an object.</description>
        <long-description/>
        <tag name="package" line="11">aura.di</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27">
        <name>$closure</name>
        <default/>
        <docblock>
          <description>A closure that creates an object instance.</description>
          <long-description/>
          <tag name="var" type="\Closure" variable="" line="20">\Closure</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="38">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag name="param" type="\Closure" variable="$closure" line="29">A closure that creates an object instance.</tag>
          <tag name="return" type="void" line="29"/>
        </docblock>
        <argument line="38">
          <name>$closure</name>
          <default/>
          <type>Closure</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="50">
        <name>__invoke</name>
        <docblock>
          <description>Invokes the closure to create the instance.</description>
          <long-description/>
          <tag name="return" type="object" line="43">The object created by the closure.</tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="src/Exception/ServiceInvalid.php" hash="1300019215">
    <class final="false" abstract="false" line="3" namespace="aura\di">
      <name>Exception_ServiceInvalid</name>
      <extends>Exception</extends>
      <full_name>aura\di\Exception_ServiceInvalid</full_name>
    </class>
  </file>
  <file path="src/Exception/ServiceNotFound.php" hash="1300019215">
    <class final="false" abstract="false" line="3" namespace="aura\di">
      <name>Exception_ServiceNotFound</name>
      <extends>Exception</extends>
      <full_name>aura\di\Exception_ServiceNotFound</full_name>
    </class>
  </file>
  <file path="scripts/instance.php" hash="1300019215">
    <include type="Require Once" namespace="aura\di" line="3">
      <name>/src.php</name>
    </include>
  </file>
  <package name="aura.di"/>
  <namespace name="aura">
    <namespace name="di"/>
  </namespace>
  <namespace name="default"/>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
