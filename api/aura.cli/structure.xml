<?xml version="1.0"?>
<project version="0.8.8" title="Aura Project for PHP: aura.cli">
  <file path="config/default.php" hash="1300019245">
    <function namespace="default" line="32">
      <name>Closure</name>
      <type>closure</type>
    </function>
  </file>
  <file path="src.php" hash="1300019245">
    <include type="Require Once" namespace="default" line="2">
      <name>/src/Command.php</name>
    </include>
    <include type="Require Once" namespace="default" line="3">
      <name>/src/CommandFactory.php</name>
    </include>
    <include type="Require Once" namespace="default" line="4">
      <name>/src/Context.php</name>
    </include>
    <include type="Require Once" namespace="default" line="5">
      <name>/src/Exception.php</name>
    </include>
    <include type="Require Once" namespace="default" line="6">
      <name>/src/Exception/CommandFactory.php</name>
    </include>
    <include type="Require Once" namespace="default" line="7">
      <name>/src/Exception/OptionName.php</name>
    </include>
    <include type="Require Once" namespace="default" line="8">
      <name>/src/Exception/OptionNotDefined.php</name>
    </include>
    <include type="Require Once" namespace="default" line="9">
      <name>/src/Exception/OptionNotMulti.php</name>
    </include>
    <include type="Require Once" namespace="default" line="10">
      <name>/src/Exception/OptionParam.php</name>
    </include>
    <include type="Require Once" namespace="default" line="11">
      <name>/src/Exception/OptionParamRejected.php</name>
    </include>
    <include type="Require Once" namespace="default" line="12">
      <name>/src/Exception/OptionParamRequired.php</name>
    </include>
    <include type="Require Once" namespace="default" line="13">
      <name>/src/Getopt.php</name>
    </include>
    <include type="Require Once" namespace="default" line="14">
      <name>/src/Option.php</name>
    </include>
    <include type="Require Once" namespace="default" line="15">
      <name>/src/OptionFactory.php</name>
    </include>
    <include type="Require Once" namespace="default" line="16">
      <name>/src/Stdio.php</name>
    </include>
    <include type="Require Once" namespace="default" line="17">
      <name>/src/Vt100.php</name>
    </include>
  </file>
  <file path="src/Context.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Context</name>
      <extends/>
      <full_name>aura\cli\Context</full_name>
      <docblock>
        <description>Collection point for information about the command-line execution context.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27">
        <name>$argv</name>
        <default/>
        <docblock>
          <description>Values taken from $_SERVER['argv'].</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="20">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36">
        <name>$env</name>
        <default/>
        <docblock>
          <description>Imported $_ENV values.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="29">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45">
        <name>$server</name>
        <default/>
        <docblock>
          <description>Imported $_SERVER values.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="38">array</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="54">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag name="return" type="void" line="47"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="81">
        <name>getEnv</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by key from the $env property, or an &lt;br/&gt;alternate default value if that key does not exist.</description>
          <long-description/>
          <tag name="param" type="string" variable="$key" line="68">The $env key to retrieve the value of.</tag>
          <tag name="param" type="string" variable="$alt" line="68">The value to return if the key does not exist.</tag>
          <tag name="return" type="mixed" line="68">The value of $env[$key], or the alternate default value.</tag>
        </docblock>
        <argument line="81">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="81">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="99">
        <name>getServer</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by key from the $server property, or&lt;br/&gt;an alternate default value if that key does not exist.</description>
          <long-description/>
          <tag name="param" type="string" variable="$key" line="86">The $server key to retrieve the value of.</tag>
          <tag name="param" type="string" variable="$alt" line="86">The value to return if the key does not exist.</tag>
          <tag name="return" type="mixed" line="86">The value of $server[$key], or the alternate default value.</tag>
        </docblock>
        <argument line="99">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="99">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="118">
        <name>getArgv</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by position from the `$argv` &lt;br/&gt;property, or an alternate default value if that position does not&lt;br/&gt;exist.</description>
          <long-description/>
          <tag name="param" type="int" variable="$key" line="104">The `$argv` positional key to retrieve the value of.</tag>
          <tag name="param" type="string" variable="$alt" line="104">The value to return if the key does not exist.</tag>
          <tag name="return" type="mixed" line="104">The value of $server[$key], or the alternate default value.</tag>
        </docblock>
        <argument line="118">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="118">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="133">
        <name>shiftArgv</name>
        <docblock>
          <description>Shifts the first value off the `$argv` property and returns it. Note&lt;br/&gt;that this modifies the `$argv` property; if you need the original,&lt;br/&gt;unmodified arguments, call `server('argv')`.</description>
          <long-description/>
          <tag name="return" type="mixed" line="123">The value shifted off the beginning of the `$argv` property.</tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="147">
        <name>setArgv</name>
        <docblock>
          <description>Sets the `$argv` property.</description>
          <long-description/>
          <tag name="param" type="array" variable="$argv" line="138">The new value of `$argv`.</tag>
          <tag name="return" type="void" line="138"/>
        </docblock>
        <argument line="147">
          <name>$argv</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="169">
        <name>getValue</name>
        <docblock>
          <description>Common method to get a property value and return it.</description>
          <long-description/>
          <tag name="param" type="string" variable="$var" line="152">The property variable to fetch from: get, post, etc.</tag>
          <tag name="param" type="string" variable="$key" line="152">The array key in that property, if any, to get the value of.</tag>
          <tag name="param" type="string" variable="$alt" line="152">The alternative default value to return if the requested key does not exist.</tag>
          <tag name="return" type="mixed" line="152">The requested value, or the alternative default value.</tag>
        </docblock>
        <argument line="169">
          <name>$var</name>
          <default/>
          <type/>
        </argument>
        <argument line="169">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="169">
          <name>$alt</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Exception.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception</name>
      <extends>\Exception</extends>
      <full_name>aura\cli\Exception</full_name>
      <docblock>
        <description>Generic package exception.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Getopt.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Getopt</name>
      <extends/>
      <full_name>aura\cli\Getopt</full_name>
      <docblock>
        <description>Retrieves and validates command-line options and parameter values.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
      <constant namespace="aura\cli" line="27">
        <name>STRICT</name>
        <value>true</value>
        <docblock>
          <description>If an option is passed that is not defined, throw an exception.</description>
          <long-description/>
          <tag name="const" line="20">bool</tag>
        </docblock>
      </constant>
      <constant namespace="aura\cli" line="36">
        <name>NON_STRICT</name>
        <value>false</value>
        <docblock>
          <description>Do not throw exceptions when undefined options are passed.</description>
          <long-description/>
          <tag name="const" line="29">bool</tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="45">
        <name>$option_factory</name>
        <default/>
        <docblock>
          <description>A factory to create Option objects.</description>
          <long-description/>
          <tag name="var" type="aura\cli\OptionFactory" variable="" line="38">aura\cli\OptionFactory</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54">
        <name>$options</name>
        <default>array</default>
        <docblock>
          <description>Definitions for recognized options.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="47">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63">
        <name>$params</name>
        <default>array</default>
        <docblock>
          <description>Remaining non-option params after loading option values.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="56">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="72">
        <name>$argv</name>
        <default>array</default>
        <docblock>
          <description>The incoming arguments, typically from $_SERVER['argv'].</description>
          <long-description/>
          <tag name="param" type="aura\cli\" variable="" line="65">array</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="81">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag name="param" type="aura\cli\OptionFactory" variable="$option_factory" line="74">A factory for Option objects.</tag>
        </docblock>
        <argument line="81">
          <name>$option_factory</name>
          <default/>
          <type>OptionFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="95">
        <name>__get</name>
        <docblock>
          <description>Make Option values available as magic readonly properties.</description>
          <long-description/>
          <tag name="param" type="string" variable="$key" line="86">The option name.</tag>
          <tag name="return" type="mixed" line="86">The option value.</tag>
        </docblock>
        <argument line="95">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="116">
        <name>init</name>
        <docblock>
          <description>Initializes the instance with option definitions.</description>
          <long-description/>
          <tag name="param" type="array" variable="$opts" line="103">An array of key-value pairs where the key is the option name and the value is the option spec.</tag>
          <tag name="param" type="bool" variable="$strict" line="103">Initialize in strict (true) or non-strict (false) mode?</tag>
          <tag name="return" type="void" line="103"/>
        </docblock>
        <argument line="116">
          <name>$opts</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="116">
          <name>$strict</name>
          <default>self</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140">
        <name>getOptions</name>
        <docblock>
          <description>Returns all the Option definition objects.</description>
          <long-description/>
          <tag name="return" type="array" line="133">An array of Option objects.</tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154">
        <name>getOption</name>
        <docblock>
          <description>Returns a single Option definition object by its property name.</description>
          <long-description/>
          <tag name="var" type="aura\cli\The" variable="$key" line="145">aura\cli\The property name of the option.</tag>
          <tag name="return" type="aura\cli\Option" line="145"/>
        </docblock>
        <argument line="154">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="172">
        <name>getOptionValues</name>
        <docblock>
          <description>Returns an array of all Option names and their values.</description>
          <long-description/>
          <tag name="return" type="array" line="165"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="190">
        <name>getOptionValue</name>
        <docblock>
          <description>Returns the value of a single Option by name.</description>
          <long-description/>
          <tag name="param" type="string" variable="$name" line="181">The option name to get a value for.</tag>
          <tag name="return" type="mixed" line="181"/>
        </docblock>
        <argument line="190">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="205">
        <name>getParams</name>
        <docblock>
          <description>Returns an array of all numeric parameters.</description>
          <long-description/>
          <tag name="return" type="array" line="198"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="219">
        <name>getLongOption</name>
        <docblock>
          <description>Returns a single Option definition object by its long-format name.</description>
          <long-description/>
          <tag name="var" type="aura\cli\The" variable="$key" line="210">aura\cli\The long-format name of the option.</tag>
          <tag name="return" type="aura\cli\Option" line="210"/>
        </docblock>
        <argument line="219">
          <name>$long</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="241">
        <name>getShortOption</name>
        <docblock>
          <description>Returns a single Option definition object by its short-format name.</description>
          <long-description/>
          <tag name="var" type="aura\cli\The" variable="$key" line="232">aura\cli\The long-format name of the option.</tag>
          <tag name="return" type="aura\cli\Option" line="232"/>
        </docblock>
        <argument line="241">
          <name>$char</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="265">
        <name>load</name>
        <docblock>
          <description>Loads Option values from an argument array, placing option values&lt;br/&gt;in the defined Option objects and placing non-option params in a &lt;br/&gt;`$params` variable.</description>
          <long-description/>
          <tag name="param" type="array" variable="$argv" line="254">An argument array, typically from $_SERVER['argv'].</tag>
          <tag name="return" type="void" line="254"/>
        </docblock>
        <argument line="265">
          <name>$argv</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="314">
        <name>loadLong</name>
        <docblock>
          <description>Parses a long-form option.</description>
          <long-description/>
          <tag name="param" type="string" variable="$spec" line="305">The `$argv` element, e.g. "--foo" or "--bar=baz".</tag>
          <tag name="return" type="void" line="305"/>
        </docblock>
        <argument line="314">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="362">
        <name>loadShort</name>
        <docblock>
          <description>Parses a short-form option (or cluster of options).</description>
          <long-description/>
          <tag name="param" type="string" variable="$arg" line="353">The `$argv` element, e.g. "-f" or "-fbz".</tag>
          <tag name="return" type="void" line="353"/>
        </docblock>
        <argument line="362">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="422">
        <name>loadShortCluster</name>
        <docblock>
          <description>Parses a cluster of short options.</description>
          <long-description/>
          <tag name="param" type="string" variable="$spec" line="413">The short-option cluster (e.g. "-abcd").</tag>
          <tag name="return" type="void" line="413"/>
        </docblock>
        <argument line="422">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Option.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Option</name>
      <extends/>
      <full_name>aura\cli\Option</full_name>
      <docblock>
        <description>Defines a single command-line option.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
      <constant namespace="aura\cli" line="27">
        <name>PARAM_REQUIRED</name>
        <value>required</value>
        <docblock>
          <description>A parameter value is required to be present for this option.</description>
          <long-description/>
          <tag name="const" line="20">string</tag>
        </docblock>
      </constant>
      <constant namespace="aura\cli" line="36">
        <name>PARAM_REJECTED</name>
        <value>rejected</value>
        <docblock>
          <description>Any parameter value on this option will be rejected.</description>
          <long-description/>
          <tag name="const" line="29">string</tag>
        </docblock>
      </constant>
      <constant namespace="aura\cli" line="45">
        <name>PARAM_OPTIONAL</name>
        <value>optional</value>
        <docblock>
          <description>A parameter value may or may not be present on this option.</description>
          <long-description/>
          <tag name="const" line="38">string</tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="54">
        <name>$name</name>
        <default>null</default>
        <docblock>
          <description>The property name of the option.</description>
          <long-description/>
          <tag name="var" type="string" variable="" line="47">string</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63">
        <name>$long</name>
        <default>null</default>
        <docblock>
          <description>The long name of the option.</description>
          <long-description/>
          <tag name="var" type="string" variable="" line="56">string</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="72">
        <name>$short</name>
        <default>null</default>
        <docblock>
          <description>The short name of the option.</description>
          <long-description/>
          <tag name="var" type="string" variable="" line="65">string</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82">
        <name>$param</name>
        <default>self</default>
        <docblock>
          <description>When the option is present, will a be parameter required, optional, or&lt;br/&gt;rejected (i.e., no param allowed) ?</description>
          <long-description/>
          <tag name="var" type="string" variable="" line="74">string</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="91">
        <name>$multi</name>
        <default>null</default>
        <docblock>
          <description>Can the option be specified multiple times?</description>
          <long-description/>
          <tag name="var" type="bool" variable="" line="84">bool</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="100">
        <name>$default</name>
        <default>null</default>
        <docblock>
          <description>The default value for the option param.</description>
          <long-description/>
          <tag name="var" type="string" variable="" line="93">string</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="109">
        <name>$value</name>
        <default>null</default>
        <docblock>
          <description>The option value as set from the command line.</description>
          <long-description/>
          <tag name="var" type="string" variable="" line="102">string</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="120">
        <name>__construct</name>
        <docblock>
          <description>Initialized the object with an option definition array.</description>
          <long-description/>
          <tag name="param" type="array" variable="$data" line="111">The option definition.</tag>
          <tag name="return" type="void" line="111"/>
        </docblock>
        <argument line="121">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="122">
          <name>$long</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="123">
          <name>$short</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="124">
          <name>$param</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="125">
          <name>$multi</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="126">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="173">
        <name>setValue</name>
        <docblock>
          <description>Sets the option value.</description>
          <long-description/>
          <tag name="param" type="mixed" variable="$value" line="164">The value to set.</tag>
          <tag name="return" type="void" line="164"/>
        </docblock>
        <argument line="173">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="199">
        <name>getValue</name>
        <docblock>
          <description>Gets the option value.</description>
          <long-description/>
          <tag name="return" type="mixed" line="191">The value as set from the command line, or the default value if not set from the command line.</tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="215">
        <name>getLong</name>
        <docblock>
          <description>Gets the long name for this option.</description>
          <long-description/>
          <tag name="return" type="string" line="208"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="227">
        <name>getShort</name>
        <docblock>
          <description>Gets the short name for this option.</description>
          <long-description/>
          <tag name="return" type="string" line="220"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="239">
        <name>getName</name>
        <docblock>
          <description>Gets the property name for this option.</description>
          <long-description/>
          <tag name="return" type="string" line="232"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="251">
        <name>getDefault</name>
        <docblock>
          <description>Gets the default value of this option.</description>
          <long-description/>
          <tag name="return" type="mixed" line="244"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="263">
        <name>isMulti</name>
        <docblock>
          <description>Can this option be present multiple times?</description>
          <long-description/>
          <tag name="return" type="bool" line="256"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="275">
        <name>isParamRequired</name>
        <docblock>
          <description>Is a param value required to be present on this option?</description>
          <long-description/>
          <tag name="return" type="bool" line="268"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="287">
        <name>isParamRejected</name>
        <docblock>
          <description>Is a param value required *not* to be present on this option?</description>
          <long-description/>
          <tag name="return" type="bool" line="280"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="299">
        <name>isParamOptional</name>
        <docblock>
          <description>Is a param value optional on this option?</description>
          <long-description/>
          <tag name="return" type="bool" line="292"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="src/Exception/OptionParam.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception_OptionParam</name>
      <extends>Exception</extends>
      <full_name>aura\cli\Exception_OptionParam</full_name>
      <docblock>
        <description>The option 'param' value needs a boolean or a null.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Exception/OptionName.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception_OptionName</name>
      <extends>Exception</extends>
      <full_name>aura\cli\Exception_OptionName</full_name>
      <docblock>
        <description>Option objects need to be initialized with a name.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Exception/OptionNotDefined.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception_OptionNotDefined</name>
      <extends>Exception</extends>
      <full_name>aura\cli\Exception_OptionNotDefined</full_name>
      <docblock>
        <description>Asked for an option that is not defined.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Exception/OptionNotMulti.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception_OptionNotMulti</name>
      <extends>Exception</extends>
      <full_name>aura\cli\Exception_OptionNotMulti</full_name>
      <docblock>
        <description>The option does not allow multiple values.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Exception/OptionParamRejected.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception_OptionParamRejected</name>
      <extends>Exception</extends>
      <full_name>aura\cli\Exception_OptionParamRejected</full_name>
      <docblock>
        <description>The option requires that no parameter be present.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Exception/OptionParamRequired.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception_OptionParamRequired</name>
      <extends>Exception</extends>
      <full_name>aura\cli\Exception_OptionParamRequired</full_name>
      <docblock>
        <description>The option requires a non-blank parameter.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Exception/CommandFactory.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Exception_CommandFactory</name>
      <extends>Exception</extends>
      <full_name>aura\cli\Exception_CommandFactory</full_name>
      <docblock>
        <description>Generic CommandFactory exception.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
    </class>
  </file>
  <file path="src/Command.php" hash="1300019245">
    <namespace-alias name="SignalManager">aura\signal\Manager</namespace-alias>
    <class final="false" abstract="true" line="19" namespace="aura\cli">
      <name>Command</name>
      <extends/>
      <full_name>aura\cli\Command</full_name>
      <docblock>
        <description>The CLI equivalent of a page-controller to perform a single action.</description>
        <long-description/>
        <tag name="package" line="12">aura.cli</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29">
        <name>$getopt</name>
        <default/>
        <docblock>
          <description>A Getopt object for the Command; retains the short and long options&lt;br/&gt;passed at the command line.</description>
          <long-description/>
          <tag name="var" type="aura\cli\Getopt" variable="" line="21">aura\cli\Getopt</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38">
        <name>$options</name>
        <default>array</default>
        <docblock>
          <description>The option definitions for the Getopt object.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="31">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49">
        <name>$options_strict</name>
        <default>Getopt</default>
        <docblock>
          <description>Should Getopt be strict about how options are processed?  In strict&lt;br/&gt;mode, passing an undefined option will throw an exception; in&lt;br/&gt;non-strict, it will not.</description>
          <long-description/>
          <tag name="var" type="bool" variable="" line="40">bool</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58">
        <name>$params</name>
        <default>array</default>
        <docblock>
          <description>The positional (numeric) arguments passed at the command line.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="51">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="68">
        <name>$skip_action</name>
        <default>false</default>
        <docblock>
          <description>When set to `true` before `action()` is called, the `action()` will not&lt;br/&gt;be called after all.</description>
          <long-description/>
          <tag name="var" type="bool" variable="" line="60">bool</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="83">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag name="param" type="aura\cli\Context" variable="$context" line="70">The command-line context.</tag>
          <tag name="param" type="aura\cli\Stdio" variable="$stdio" line="70">Standard input/output streams.</tag>
          <tag name="param" type="aura\cli\Getopt" variable="$getopt" line="70">An options processor and reader.</tag>
          <tag name="param" type="aura\signal\Manager" variable="$signal" line="70">A signal manager to send signals to.</tag>
        </docblock>
        <argument line="84">
          <name>$context</name>
          <default/>
          <type>Context</type>
        </argument>
        <argument line="85">
          <name>$stdio</name>
          <default/>
          <type>Stdio</type>
        </argument>
        <argument line="86">
          <name>$getopt</name>
          <default/>
          <type>Getopt</type>
        </argument>
        <argument line="87">
          <name>$signal</name>
          <default/>
          <type>SignalManager</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="113">
        <name>loadGetoptParams</name>
        <docblock>
          <description>Passes the Context arguments to `$getopt` and retains the numeric&lt;br/&gt;parameters in `$params`.</description>
          <long-description/>
          <tag name="return" type="void" line="105"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="148">
        <name>exec</name>
        <docblock>
          <description>Executes the Command.  In order, it does these things:</description>
          <long-description>- signals `'pre_exec'`&lt;br/&gt;&lt;br/&gt;- signals `'pre_action'`&lt;br/&gt;&lt;br/&gt;- is the action is not to be skipped, calls `action()` and signals &lt;br/&gt;  `'post_action'`&lt;br/&gt;&lt;br/&gt;- signals `'post_exec'`&lt;br/&gt;&lt;br/&gt;- resets the terminal to normal colors</long-description>
          <tag name="signal" line="120">'pre_exec'</tag>
          <tag name="signal" line="120">'pre_action'</tag>
          <tag name="signal" line="120">'post_action'</tag>
          <tag name="signal" line="120">'post_exec'</tag>
          <tag name="see" line="120">action()</tag>
          <tag name="return" type="void" line="120"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="170">
        <name>skipAction</name>
        <docblock>
          <description>Stops `exec()` from calling `action()` if it has not already done so.</description>
          <long-description/>
          <tag name="return" type="void" line="163"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="182">
        <name>isSkipAction</name>
        <docblock>
          <description>Should the call to `action()` be skipped?</description>
          <long-description/>
          <tag name="return" type="bool" line="175"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="194">
        <name>preExec</name>
        <docblock>
          <description>Runs before `action()` as part of the `'pre_exec'` signal.</description>
          <long-description/>
          <tag name="return" type="mixed" line="187"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="205">
        <name>preAction</name>
        <docblock>
          <description>Runs before `action()` as part of the `'pre_action'` signal.</description>
          <long-description/>
          <tag name="return" type="mixed" line="198"/>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="216">
        <name>action</name>
        <docblock>
          <description>The main logic for the Command.</description>
          <long-description/>
          <tag name="return" type="void" line="209"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="225">
        <name>postAction</name>
        <docblock>
          <description>Runs after `action()` as part of the `'post_action'` signal.</description>
          <long-description/>
          <tag name="return" type="mixed" line="218"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="236">
        <name>postExec</name>
        <docblock>
          <description>Runs after `action()` as part of the `'post_exec'` signal.</description>
          <long-description/>
          <tag name="return" type="mixed" line="229"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="src/Stdio.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>Stdio</name>
      <extends/>
      <full_name>aura\cli\Stdio</full_name>
      <docblock>
        <description>Provides a wrapper for standard input/output handles.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27">
        <name>$stdin</name>
        <default/>
        <docblock>
          <description>A handle for standard input.</description>
          <long-description/>
          <tag name="var" type="resource" variable="" line="20">resource</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36">
        <name>$stdout</name>
        <default/>
        <docblock>
          <description>A handle for standard output.</description>
          <long-description/>
          <tag name="var" type="resource" variable="" line="29">resource</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45">
        <name>$stderr</name>
        <default/>
        <docblock>
          <description>A handle for standard error.</description>
          <long-description/>
          <tag name="var" type="resource" variable="" line="38">resource</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54">
        <name>$vt100</name>
        <default/>
        <docblock>
          <description>A Vt100 object to format output.</description>
          <long-description/>
          <tag name="var" type="aura\cli\Vt100" variable="" line="47">aura\cli\Vt100</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="67">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description/>
          <tag name="param" type="resource" variable="$stdin" line="56">A handle for standard input.</tag>
          <tag name="param" type="resource" variable="$stdout" line="56">A handle for standard output.</tag>
          <tag name="param" type="resource" variable="$stderr" line="56">A handle for standard error.</tag>
        </docblock>
        <argument line="68">
          <name>$stdin</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$stdout</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$stderr</name>
          <default/>
          <type/>
        </argument>
        <argument line="71">
          <name>$vt100</name>
          <default/>
          <type>Vt100</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="86">
        <name>getStdin</name>
        <docblock>
          <description>Returns the standard input handle.</description>
          <long-description/>
          <tag name="return" type="resource" line="79"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="98">
        <name>getStdout</name>
        <docblock>
          <description>Returns the standard output handle.</description>
          <long-description/>
          <tag name="return" type="resource" line="91"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="110">
        <name>getStderr</name>
        <docblock>
          <description>Returns the standard error handle.</description>
          <long-description/>
          <tag name="return" type="resource" line="103"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="123">
        <name>in</name>
        <docblock>
          <description>Gets user input from the command line, optionally after sending a&lt;br/&gt;prompt to standard output.</description>
          <long-description/>
          <tag name="return" type="void" line="115"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="128">
        <name>inln</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="143">
        <name>out</name>
        <docblock>
          <description>Prints text to standard output via the Vt100 formatter **without** &lt;br/&gt;a trailing newline.</description>
          <long-description/>
          <tag name="param" type="string" variable="$string" line="133">The text to print to standard output.</tag>
          <tag name="return" type="void" line="133"/>
        </docblock>
        <argument line="143">
          <name>$string</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="158">
        <name>outln</name>
        <docblock>
          <description>Prints text to standard output via the Vt100 formatter **with** &lt;br/&gt;a trailing newline.</description>
          <long-description/>
          <tag name="param" type="string" variable="$string" line="148">The text to print to standard output.</tag>
          <tag name="return" type="void" line="148"/>
        </docblock>
        <argument line="158">
          <name>$string</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="173">
        <name>err</name>
        <docblock>
          <description>Prints text to standard error via the Vt100 formatter **without** &lt;br/&gt;a trailing newline.</description>
          <long-description/>
          <tag name="param" type="string" variable="$string" line="163">The text to print to standard error.</tag>
          <tag name="return" type="void" line="163"/>
        </docblock>
        <argument line="173">
          <name>$string</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="188">
        <name>errln</name>
        <docblock>
          <description>Prints text to standard error via the Vt100 formatter **without** &lt;br/&gt;a trailing newline.</description>
          <long-description/>
          <tag name="param" type="string" variable="$string" line="178">The text to print to standard error.</tag>
          <tag name="return" type="void" line="178"/>
        </docblock>
        <argument line="188">
          <name>$string</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/OptionFactory.php" hash="1300019245">
    <class final="false" abstract="false" line="18" namespace="aura\cli">
      <name>OptionFactory</name>
      <extends/>
      <full_name>aura\cli\OptionFactory</full_name>
      <docblock>
        <description>A factory to create Option objects.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27">
        <name>$params</name>
        <default>array</default>
        <docblock>
          <description>An array of default parameters for Option objects.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="20">array</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="46">
        <name>newInstance</name>
        <docblock>
          <description>Creates and returns a new Option object.</description>
          <long-description/>
          <tag name="param" type="array" variable="$params" line="36">An array of key-value pairs corresponding to Option constructor params.</tag>
          <tag name="return" type="aura\cli\Option" line="36"/>
        </docblock>
        <argument line="46">
          <name>$params</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/CommandFactory.php" hash="1300019245">
    <namespace-alias name="ForgeInterface">aura\di\ForgeInterface</namespace-alias>
    <class final="false" abstract="false" line="19" namespace="aura\cli">
      <name>CommandFactory</name>
      <extends/>
      <full_name>aura\cli\CommandFactory</full_name>
      <docblock>
        <description>A factory to create Command objects.</description>
        <long-description/>
        <tag name="package" line="12">aura.cli</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28">
        <name>$forge</name>
        <default/>
        <docblock>
          <description>A Forge to create objects.</description>
          <long-description/>
          <tag name="var" type="aura\di\ForgeInterface" variable="" line="21">aura\di\ForgeInterface</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38">
        <name>$map</name>
        <default>array</default>
        <docblock>
          <description>A map of names (called at the command line) to their corresponding&lt;br/&gt;Command classes.</description>
          <long-description/>
          <tag name="var" type="array" variable="" line="30">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47">
        <name>$not_found</name>
        <default>null</default>
        <docblock>
          <description>A Command class to use when no class exists for a mapped name.</description>
          <long-description/>
          <tag name="var" type="string" variable="" line="40">string</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="61">
        <name>__construct</name>
        <docblock>
          <description>A Command class to use when no class exists for a mapped name.</description>
          <long-description/>
          <tag name="param" type="aura\di\ForgeInterface" variable="$forge" line="49">A Forge to create objects.</tag>
          <tag name="param" type="array" variable="$map" line="49">A map of command names to Command classes.</tag>
          <tag name="param" type="string" variable="$not_found" line="49">A Command class to use when no class can be found for a mapped name.</tag>
        </docblock>
        <argument line="62">
          <name>$forge</name>
          <default/>
          <type>ForgeInterface</type>
        </argument>
        <argument line="63">
          <name>$map</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="64">
          <name>$not_found</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="84">
        <name>newInstance</name>
        <docblock>
          <description>Creates and returns a Command class based on a command name.</description>
          <long-description/>
          <tag name="param" type="string" variable="$name" line="71">A command name that maps to a Command class; if this name is not found in the map, use the `$not_found` class.</tag>
          <tag name="return" type="aura\cli\Command" line="71"/>
          <tag name="throws" line="71">Exception_CommandFactory when no mapped class can be found
and no `$not_found` class is specified.</tag>
        </docblock>
        <argument line="84">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="97">
        <name>map</name>
        <argument line="97">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="97">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Vt100.php" hash="1300019245">
    <class final="false" abstract="false" line="24" namespace="aura\cli">
      <name>Vt100</name>
      <extends/>
      <full_name>aura\cli\Vt100</full_name>
      <docblock>
        <description>Text formatting for VT100 terminals.</description>
        <long-description/>
        <tag name="package" line="11">aura.cli</tag>
        <tag name="author" line="11">Clay Loveless &lt;clay@killersoft.com&gt;</tag>
        <tag name="author" line="11">Paul M. Jones &lt;pmjones@paul-m-jones.com&gt;</tag>
        <tag name="license" line="11">http://opensource.org/licenses/bsd-license.php BSD</tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="39">
        <name>$format</name>
        <default>array</default>
        <docblock>
          <description>Array of format conversions for use on a variety of pre-set console&lt;br/&gt;style combinations.</description>
          <long-description>Based on `ANSI VT100 Color/Style Codes` according to the&lt;br/&gt;[VT100 User Guide](http://vt100.net/docs/vt100-ug) and the&lt;br/&gt;[ANSI/VT100 Terminal Control reference](http://www.termsys.demon.co.uk/vtansi.htm).&lt;br/&gt;Inspired by [PEAR Console_Color](http://pear.php.net/Console_Color).</long-description>
          <tag name="var" type="array" variable="" line="26">array</tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="98">
        <name>$posix</name>
        <default>null</default>
        <docblock>
          <description>The POSIX terminal flag.</description>
          <long-description/>
          <tag name="var" type="bool" variable="" line="87">bool</tag>
          <tag name="see" line="87">setPosix()</tag>
          <tag name="see" line="87">getPosix()</tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="111">
        <name>setPosix</name>
        <docblock>
          <description>Forces output to format for POSIX terminals, or to strip for non-POSIX&lt;br/&gt;terminals; when null, will auto-determine if the terminal is POSIX.</description>
          <long-description/>
          <tag name="param" type="bool" variable="$flag" line="100">True to force formatting, false to force stripping, or null to auto-determine.</tag>
          <tag name="return" type="void" line="100"/>
        </docblock>
        <argument line="111">
          <name>$flag</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="128">
        <name>getPosix</name>
        <docblock>
          <description>Gets the value of the POSIX terminal flag.</description>
          <long-description/>
          <tag name="param" type="mixed" variable="$flag" line="120">True to force formatting, false to force stripping, or null to auto-determine.</tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="142">
        <name>format</name>
        <docblock>
          <description>Converts VT100 %-markup in text to control codes.</description>
          <long-description/>
          <tag name="param" type="string" variable="$text" line="133">The text to format.</tag>
          <tag name="return" type="string" line="133">The formatted text.</tag>
        </docblock>
        <argument line="142">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="156">
        <name>strip</name>
        <docblock>
          <description>Strips VT100 %-markup from text.</description>
          <long-description/>
          <tag name="param" type="string" variable="$text" line="147">The text to strip %-markup from.</tag>
          <tag name="return" type="string" line="147">The plain text.</tag>
        </docblock>
        <argument line="156">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="184">
        <name>write</name>
        <docblock>
          <description>Writes text to a file handle, converting to control codes if the handle&lt;br/&gt;is a posix TTY, or to plain text if not.</description>
          <long-description/>
          <tag name="param" type="resource" variable="$handle" line="169">The file handle.</tag>
          <tag name="param" type="string" variable="$text" line="169">The text to write to the file handle, converting %-markup if the handle is a posix TTY, or stripping markup if not.</tag>
          <tag name="return" type="void" line="169"/>
          <tag name="see" line="169">writeln()</tag>
        </docblock>
        <argument line="184">
          <name>$handle</name>
          <default/>
          <type/>
        </argument>
        <argument line="184">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="210">
        <name>writeln</name>
        <docblock>
          <description>Writes text to a file handle, converting to control codes if the handle&lt;br/&gt;is a posix TTY, or to plain text if not, and then appends a newline.</description>
          <long-description/>
          <tag name="param" type="resource" variable="$handle" line="195">The file handle.</tag>
          <tag name="param" type="string" variable="$text" line="195">The text to write to the file handle, converting %-markup if the handle is a posix TTY, or stripping markup if not.</tag>
          <tag name="return" type="void" line="195"/>
          <tag name="see" line="195">write()</tag>
        </docblock>
        <argument line="210">
          <name>$handle</name>
          <default/>
          <type/>
        </argument>
        <argument line="210">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="225">
        <name>isPosix</name>
        <docblock>
          <description>Determines if a stream handle should be treated as a POSIX terminal.</description>
          <long-description/>
          <tag name="param" type="resource" variable="$handle" line="216">The stream handle.</tag>
          <tag name="return" type="bool" line="216"/>
        </docblock>
        <argument line="225">
          <name>$handle</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="aura.cli"/>
  <namespace name="aura">
    <namespace name="cli"/>
  </namespace>
  <namespace name="default"/>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
