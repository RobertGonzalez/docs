<?xml version="1.0"?>
<project version="0.8.11" title="Aura Project for PHP: aura.web">
  <file path="config/default.php" hash="7a28469a50663d752c32ed3de00c231d">
    <function namespace="default" line="12">
      <name>Closure</name>
      <type>closure</type>
    </function>
  </file>
  <file path="src.php" hash="405d3d40b82a2d731481779cfc7c827a">
    <include type="Require Once" line="2">
      <name>/src/Context.php</name>
    </include>
    <include type="Require Once" line="3">
      <name>/src/Csrf.php</name>
    </include>
    <include type="Require Once" line="4">
      <name>/src/Exception/Context.php</name>
    </include>
    <include type="Require Once" line="5">
      <name>/src/Exception/InvalidTokenFormat.php</name>
    </include>
  </file>
  <file path="src/Context.php" hash="23995b85344094b0dd8260dd55242bd3">
    <class final="false" abstract="false" line="24" namespace="aura\web">
      <name>Context</name>
      <extends/>
      <full_name>aura\web\Context</full_name>
      <docblock>
        <description>Collection point for information about the web environment.</description>
        <long-description>
</long-description>
        <tag name="package" description="aura.web" line="11"/>
        <tag name="todo" description="Combine $_POST and $_FILES in getPost() by default, then add &#10;getPostOnly() and getFilesOnly() ?  What about raw(), then, when files&#10;have been sent?  Call it getData() ?" line="11"/>
        <tag name="todo" description="rename &amp;#039;http&amp;#039; to &amp;#039;header&amp;#039; or &amp;#039;headers&amp;#039;?" line="11"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33">
        <name>$get</name>
        <default/>
        <docblock>
          <description>Imported $_GET values.</description>
          <long-description>
</long-description>
          <tag name="var" description="array" type="" variable="" line="26">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42">
        <name>$post</name>
        <default/>
        <docblock>
          <description>Imported $_POST values.</description>
          <long-description>
</long-description>
          <tag name="var" description="array" type="" variable="" line="35">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51">
        <name>$server</name>
        <default/>
        <docblock>
          <description>Imported $_SERVER values.</description>
          <long-description>
</long-description>
          <tag name="var" description="array" type="" variable="" line="44">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60">
        <name>$cookie</name>
        <default/>
        <docblock>
          <description>Imported $_COOKIE values.</description>
          <long-description>
</long-description>
          <tag name="var" description="array" type="" variable="" line="53">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69">
        <name>$env</name>
        <default/>
        <docblock>
          <description>Imported $_ENV values.</description>
          <long-description>
</long-description>
          <tag name="var" description="array" type="" variable="" line="62">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="78">
        <name>$files</name>
        <default/>
        <docblock>
          <description>Imported $_FILES values.</description>
          <long-description>
</long-description>
          <tag name="var" description="array" type="" variable="" line="71">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="90">
        <name>$header</name>
        <default/>
        <docblock>
          <description>Imported $_SERVER['HTTP_*'] values.</description>
          <long-description>&lt;p&gt;Header keys are normalized and lower-cased; keys and values are
filtered for control characters.&lt;/p&gt;
</long-description>
          <tag name="var" description="array" type="" variable="" line="80">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="92">
        <name>$accept</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="101">
        <name>$raw_input</name>
        <default>false</default>
        <docblock>
          <description>The value of `php://input`.</description>
          <long-description>
</long-description>
          <tag name="var" description="string" type="" variable="" line="94">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="110">
        <name>$csrf</name>
        <default/>
        <docblock>
          <description>A cross-site request forgery object.</description>
          <long-description>
</long-description>
          <tag name="var" description="Csrf" type="" variable="" line="103">
            <type>aura\web\</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="117">
        <name>__construct</name>
        <docblock>
          <description>Constructor.</description>
          <long-description>
</long-description>
        </docblock>
        <argument line="118">
          <name>$get</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="119">
          <name>$post</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="120">
          <name>$server</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="121">
          <name>$cookie</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="122">
          <name>$env</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="123">
          <name>$files</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="124">
          <name>$csrf</name>
          <default>null</default>
          <type>Csrf</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="151">
        <name>__get</name>
        <docblock>
          <description>Magic get to make properties read-only.</description>
          <long-description>
</long-description>
          <tag name="param" description="The property to read." type="string" variable="$key" line="142">
            <type>string</type>
          </tag>
          <tag name="return" description="The property value." type="mixed" line="142">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="171">
        <name>isGet</name>
        <docblock>
          <description>Is this a GET request?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="164">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="183">
        <name>isPost</name>
        <docblock>
          <description>Is this a POST request?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="176">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="195">
        <name>isPut</name>
        <docblock>
          <description>Is this a PUT request?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="188">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="207">
        <name>isDelete</name>
        <docblock>
          <description>Is this a DELETE request?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="200">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="219">
        <name>isHead</name>
        <docblock>
          <description>Is this a HEAD request?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="212">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="231">
        <name>isOptions</name>
        <docblock>
          <description>Is this an OPTIONS request?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="224">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="243">
        <name>isXhr</name>
        <docblock>
          <description>Is this an XmlHttpRequest?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="236">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="261">
        <name>isCsrf</name>
        <docblock>
          <description>Is the current request a cross-site forgery?</description>
          <long-description>&lt;p&gt;Note: if the key does not exist this method will return true.&lt;/p&gt;
</long-description>
          <tag name="throws" description="aura\web\Exception_Context If a CSRF library has not been provided." line="248"/>
          <tag name="param" description="The name of the $_POST key containing the CSRF token." type="string" variable="$key" line="248">
            <type>string</type>
          </tag>
          <tag name="return" description="" type="bool" line="248">
            <type>bool</type>
          </tag>
        </docblock>
        <argument line="261">
          <name>$key</name>
          <default>__csrf_token</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="284">
        <name>isSsl</name>
        <docblock>
          <description>Is this an SSL request?</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="boolean" line="277">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="303">
        <name>getQuery</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by key from the `$get` property,
or an alternate default value if that key does not exist.</description>
          <long-description>
</long-description>
          <tag name="param" description="The $get key to retrieve the value of." type="string" variable="$key" line="290">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist." type="string" variable="$alt" line="290">
            <type>string</type>
          </tag>
          <tag name="return" description="The value of $get[$key], or the alternate default value." type="mixed" line="290">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="303">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="303">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="321">
        <name>getCookie</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by key from the `$cookie` property,
or an alternate default value if that key does not exist.</description>
          <long-description>
</long-description>
          <tag name="param" description="The $cookie key to retrieve the value of." type="string" variable="$key" line="308">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist." type="string" variable="$alt" line="308">
            <type>string</type>
          </tag>
          <tag name="param" description="The value of $cookie[$key], or the alternate default value." type="bool" variable="" line="308">
            <type>bool</type>
          </tag>
        </docblock>
        <argument line="321">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="321">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="339">
        <name>getEnv</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by key from the `$env` property,
or an alternate default value if that key does not exist.</description>
          <long-description>
</long-description>
          <tag name="param" description="The $env key to retrieve the value of." type="string" variable="$key" line="326">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist." type="string" variable="$alt" line="326">
            <type>string</type>
          </tag>
          <tag name="return" description="The value of $env[$key], or the alternate default value." type="mixed" line="326">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="339">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="339">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="357">
        <name>getServer</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by key from the `$server` property,
or an alternate default value if that key does not exist.</description>
          <long-description>
</long-description>
          <tag name="param" description="The $server key to retrieve the value of." type="string" variable="$key" line="344">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist." type="string" variable="$alt" line="344">
            <type>string</type>
          </tag>
          <tag name="return" description="The value of $server[$key], or the alternate default value." type="mixed" line="344">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="357">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="357">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="383">
        <name>getInput</name>
        <docblock>
          <description>Retrieves an **unfiltered** value from a user input.</description>
          <long-description>&lt;p&gt;A value by key from the &lt;code&gt;$post&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;$files&lt;/code&gt; properties, or an 
alternate default value if that key does not exist in either location.
Files takes precedence over post.&lt;/p&gt;

&lt;p&gt;If the key is null and the content type isn't &lt;code&gt;multipart/form-data&lt;/code&gt; and 
&lt;code&gt;$post&lt;/code&gt; and &lt;code&gt;$files&lt;/code&gt; are empty, the raw data from the request body 
is returned.&lt;/p&gt;
</long-description>
          <tag name="param" description="The $post and $files key to retrieve the value of." type="string" variable="$key" line="362">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist in either $post or $files." type="string" variable="$alt" line="362">
            <type>string</type>
          </tag>
          <tag name="return" description="The value of $post[$key] combined with $files[$key], or the raw request body, or the alternate default value." type="mixed" line="362">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="383">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="383">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="473">
        <name>getHeader</name>
        <docblock>
          <description>Retrieves an **unfiltered** value by key from the `$header` property,
or an alternate default value if that key does not exist.</description>
          <long-description>
</long-description>
          <tag name="param" description="The $http key to retrieve the value of." type="string" variable="$key" line="460">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist." type="string" variable="$alt" line="460">
            <type>string</type>
          </tag>
          <tag name="return" description="The value of $header[$key], or the alternate default value." type="mixed" line="460">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="473">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="473">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="491">
        <name>parseAccept</name>
        <docblock>
          <description>Parse a http[accept*] header and sort by the quality factor, the 
highest being first in the returned array. The returned data is 
unfiltered.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the accept header to parse." type="string" variable="$header" line="478">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist." type="mixed" variable="$alt" line="478">
            <type>mixed</type>
          </tag>
          <tag name="return" description="" type="array" line="478">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="491">
          <name>$accept</name>
          <default/>
          <type/>
        </argument>
        <argument line="491">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="526">
        <name>getAccept</name>
        <docblock>
          <description>Gets an `Accept` header.  If you want the content-type, ask for 
`'type'`; otherwise, if you want (e.g.) `'Accept-Language'`, ask for 
`'language'`.</description>
          <long-description>
</long-description>
          <tag name="param" description="The `$accept` key to return; if null, returns the entire `$accept` property." type="string" variable="$key" line="512">
            <type>string</type>
          </tag>
          <tag name="param" description="The value to return if the key does not exist." type="mixed" variable="$alt" line="512">
            <type>mixed</type>
          </tag>
          <tag name="return" description="" type="array" line="512">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="526">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="526">
          <name>$alt</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="568">
        <name>setupHeader</name>
        <docblock>
          <description>Setup the "fake" `$header` property.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="void" line="561">
            <type>void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="610">
        <name>rebuildFiles</name>
        <docblock>
          <description>Recursive method to rebuild $_FILES structure to be more like $_POST.</description>
          <long-description>
</long-description>
          <tag name="param" description="The source $_FILES array, perhaps from a sub- element of that array/" type="array" variable="$src" line="597">
            <type>array</type>
          </tag>
          <tag name="param" description="&amp;amp;$tgt Where we will store the restructured data when we find it." type="array" variable="" line="597">
            <type>array</type>
          </tag>
          <tag name="return" description="" type="void" line="597">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="610">
          <name>$src</name>
          <default/>
          <type/>
        </argument>
        <argument line="610">
          <name>$tgt</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="665">
        <name>getValue</name>
        <docblock>
          <description>Common method to get a property value and return it.</description>
          <long-description>
</long-description>
          <tag name="param" description="The property variable to fetch from: get, post, etc." type="string" variable="$var" line="649">
            <type>string</type>
          </tag>
          <tag name="param" description="The array key, if any, to get the value of." type="string" variable="$key" line="649">
            <type>string</type>
          </tag>
          <tag name="param" description="The alternative default value to return if the requested key does not exist." type="string" variable="$alt" line="649">
            <type>string</type>
          </tag>
          <tag name="return" description="The requested value, or the alternative default value." type="mixed" line="649">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="665">
          <name>$var</name>
          <default/>
          <type/>
        </argument>
        <argument line="665">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="665">
          <name>$alt</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Csrf.php" hash="4b4f392d82ac6c126ec2a5390757a0c4">
    <class final="false" abstract="false" line="12" namespace="aura\web">
      <name>Csrf</name>
      <extends/>
      <full_name>aura\web\Csrf</full_name>
      <docblock>
        <description>Generate and validate CSRF tokens.</description>
        <long-description>
</long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="15">
        <name>$secret_key</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="Project unique key." type="string" variable="" line="14">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="18">
        <name>$user_id</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="Something unique to the user. NOT a password!" type="string" variable="" line="17">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="21">
        <name>$hash_algo</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="Hash algorithm." type="string" variable="" line="20">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="24">
        <name>$timeout</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="Time in seconds before a token expires." type="integer" variable="" line="23">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="48">
        <name>__construct</name>
        <docblock>
          <description>NOTE: Each project should have a unique and random $secret_key.</description>
          <long-description>&lt;p&gt;The $user_id must be something unique to the user and does not change
between requests. This allows the token to be linked to one user. 
The $user_id could be an email address or the primary key from the users 
table, anything unique to the user, except for passwords will do.&lt;/p&gt;
</long-description>
          <tag name="param" description="Project unique key." type="string" variable="$secret_key" line="28">
            <type>string</type>
          </tag>
          <tag name="param" description="Unique id for a user i.e. email address." type="mixed" variable="$user_id" line="28">
            <type>mixed</type>
          </tag>
          <tag name="param" description="In seconds. Default is 30 minutes." type="integer" variable="$timeout" line="28">
            <type>integer</type>
          </tag>
          <tag name="param" description="Hashing algorithm for hash_hmac()." type="string" variable="$hash_algo" line="28">
            <type>string</type>
          </tag>
          <tag name="todo" description="cli script to generate random keys" line="28"/>
        </docblock>
        <argument line="48">
          <name>$secret_key</name>
          <default/>
          <type/>
        </argument>
        <argument line="48">
          <name>$user_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="48">
          <name>$timeout</name>
          <default>1800</default>
          <type/>
        </argument>
        <argument line="48">
          <name>$hash_algo</name>
          <default>sha1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="67">
        <name>__get</name>
        <docblock>
          <description>Magic get to provide access to the hash_algo and timeout variables.</description>
          <long-description>
</long-description>
          <tag name="throws" description="\UnexpectedValueException" line="56"/>
          <tag name="param" description="The property to retrieve: hash_algo &amp;amp; timeout." type="string" variable="$key" line="56">
            <type>string</type>
          </tag>
          <tag name="return" description="" type="mixed" line="56">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="88">
        <name>__set</name>
        <docblock>
          <description>Magic set to provide access to the secret_key, hash_algo and timeout 
variables.</description>
          <long-description>
</long-description>
          <tag name="throws" description="\UnexpectedValueException" line="76"/>
          <tag name="param" description="The property to set: secret_key, hash_algo &amp;amp; timeout." type="string" variable="$key" line="76">
            <type>string</type>
          </tag>
          <tag name="return" description="" type="void" line="76">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="88">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="105">
        <name>generateToken</name>
        <docblock>
          <description>Generate a CSRF token.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="string" line="98">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="136">
        <name>isValidToken</name>
        <docblock>
          <description>Test if a token is valid and has not timed out.</description>
          <long-description>&lt;p&gt;If the incoming token is not propertly formated the exception 
aura\csrf\Exception_InvalidTokenFormat will be thrown.&lt;/p&gt;
</long-description>
          <tag name="throws" description="aura\csrf\Exception_InvalidTokenFormat" line="122"/>
          <tag name="param" description="" type="string" variable="$incoming_token" line="122">
            <type>string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="122">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$incoming_token</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/Exception/Context.php" hash="5f5386e0314ea517fa8c2f5c4629d49a">
    <class final="false" abstract="false" line="3" namespace="aura\web">
      <name>Exception_Context</name>
      <extends>\Exception</extends>
      <full_name>aura\web\Exception_Context</full_name>
    </class>
  </file>
  <file path="src/Exception/MalformedToken.php" hash="cf989833b7cd9d56ae26b00d25fd00d0">
    <class final="false" abstract="false" line="5" namespace="aura\web">
      <name>Exception_MalformedToken</name>
      <extends>\Exception</extends>
      <full_name>aura\web\Exception_MalformedToken</full_name>
      <method final="false" abstract="false" static="false" visibility="public" line="7">
        <name>__construct</name>
      </method>
    </class>
  </file>
  <file path="scripts/instance.php" hash="53b5ebe40d79d8537f8847cd735da86f">
    <namespace-alias name="Csrf">aura\web\Csrf</namespace-alias>
    <namespace-alias name="WebContext">aura\web\Context</namespace-alias>
    <include type="Require" line="15">
      <name>/src/Csrf.php</name>
    </include>
    <include type="Require" line="16">
      <name>/src/Context.php</name>
    </include>
    <include type="Require" line="17">
      <name>/src/Exception/InvalidTokenFormat.php</name>
    </include>
    <include type="Require" line="18">
      <name>/src/Exception/Context.php</name>
    </include>
  </file>
  <package name="aura.web"/>
  <namespace name="aura">
    <namespace name="web"/>
  </namespace>
  <namespace name="default"/>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
